# This illustrates component and parameter sharing.
# There are 2 ways to achieve this:
# - YAML's anchor system where '&' denotes a named anchor, '*' denotes a reference to an anchor.
#   This essentially copies values or subcomponents from one place to another.
#   It can be combined with the << operator that allows copying parts of a dictionary, but overwriting other parts.
# - XNMT's !Ref object creates a reference, meaning both places will point to the exact same Python object,
#   and that DyNet parameters will be shared.
#   References can be made by path or by name, as illustrated below. The name refers to a _xnmt_id that can
#   be set in any component and must be unique.
#   Note that references do not work across experiments (e.g. we cannot refer to exp2.load from within exp1.pretrain)

exp1.pretrain: &exp1
  global: &exp1_exp
    model_file: examples/output/<EXP>.mod
    out_file: examples/output/<EXP>.out
    err_file: examples/output/<EXP>.err
    default_layer_dim: 32
  model: !DefaultTranslator &main_model
    src_reader: !PlainTextReader {}
    trg_reader: !PlainTextReader {}
    src_embedder: !SimpleWordEmbedder
      vocab_size: 500 # TODO: remove this line
      emb_dim: 32
    encoder: !BiLSTMSeqTransducer
      layers: 1
    attender: !MlpAttender {}
    # reference-sharing between softmax projection and target embedder. This means both layers share DyNet parameters!
    trg_embedder: !DenseWordEmbedder
      _xnmt_id: trg_emb # this id must be unique and is needed to create a reference-by-name below.
      vocab_size: 500 # TODO: remove this line
      emb_dim: 32
    decoder: !MlpSoftmaxDecoder
      vocab_size: 500 # TODO: remove this line
      layers: 1
      bridge: !CopyBridge {}
      vocab_projector: !Ref { name: trg_emb }
      #                alternatively, the same could be achieved like this,
      #                in which case model.trg_embedder._xnmt_id is not required:
      #                !Ref { path: model.trg_embedder }
    inference: !SimpleInference {}
  train: !SimpleTrainingRegimen &exp1_train
    run_for_epochs: 2
    src_file: examples/data/head.ja
    trg_file: examples/data/head.en
    dev_tasks:
      - !LossEvalTask
        src_file: &dev_src examples/data/head.ja
        ref_file: &dev_trg examples/data/head.en
  evaluate:
    - !AccuracyEvalTask
      eval_metrics: bleu,wer
      src_file: *dev_src # Copy over the file path from the dev tasks using YAML anchors.
      ref_file: *dev_trg # The same could also be done for more complex objects.
      hyp_file: examples/output/<EXP>.test_hyp

exp2.load:
  << : *exp1 # use YAML's << operator to copy over exp1, but overwrite the 'global' and 'train' parts
  global:
    << : *exp1_exp # copy over exp1.global, but overwrite the model_file entry
    model_file: examples/output/<EXP>.mod
  train: !SimpleTrainingRegimen
    << : *exp1_train # copy over exp1.train, but overwrite the pretrained_model_file entry
    pretrained_model_file: examples/output/exp1.pretrain.mod
